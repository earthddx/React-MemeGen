{"ast":null,"code":"var _jsxFileName = \"/Users/artemmurzo/Desktop/Old projects/reactapp/src/MainProgram.js\";\nimport React, { Component } from \"react\";\n\nclass MainProgram extends Component {\n  constructor() {\n    super();\n\n    this.handleChange = event => {\n      const _event$target = event.target,\n            name = _event$target.name,\n            value = _event$target.value;\n      this.setState({\n        [name]: value\n      });\n    };\n\n    this.handleSubmit = event => {\n      event.preventDefault();\n      const randNum = Math.floor(Math.random() * this.state.allMemeImgs.length);\n      const randMemeImg = this.state.allMemeImgs[randNum].url;\n      const memeName = this.state.allMemeImgs[randNum].name;\n      this.setState({\n        randomImg: randMemeImg,\n        memeOrigName: memeName\n      });\n    };\n\n    this.handleFont = () => {};\n\n    this.state = {\n      topText: \"\",\n      bottomText: \"\",\n      fontSize: \"20\",\n      randomImg: \"http://i.imgflip.com/1bij.jpg\",\n      allMemeImgs: [],\n      memeOrigName: \"\"\n    };\n  }\n\n  componentDidMount() {\n    fetch(\"https://api.imgflip.com/get_memes\").then(response => response.json()).then(response => {\n      const memes = response.data.memes;\n      this.setState({\n        allMemeImgs: memes\n      });\n    });\n  }\n\n  render() {\n    return React.createElement(React.Fragment, null, React.createElement(\"form\", {\n      className: \"meme-form\",\n      onSubmit: this.handleSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      type: \"text\",\n      name: \"topText\",\n      placeholder: \"Top Text\",\n      value: this.state.topText,\n      onChange: this.handleChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56\n      },\n      __self: this\n    }, \"Make\"), React.createElement(\"input\", {\n      type: \"text\",\n      name: \"bottomText\",\n      placeholder: \"Bottom Text\",\n      value: this.state.bottomText,\n      onChange: this.handleChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57\n      },\n      __self: this\n    }), React.createElement(\"input\", {\n      type: \"number\",\n      name: \"fontSize\",\n      placeholder: \"Choose font size\",\n      value: this.state.fontSize,\n      onChange: this.handleChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"meme\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    }, React.createElement(\"img\", {\n      src: this.state.randomImg,\n      alt: \"\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    }), React.createElement(\"h2\", {\n      className: \"top\",\n      style: {\n        fontSize: Number(this.state.fontSize)\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    }, this.state.topText), React.createElement(\"h2\", {\n      className: \"bottom\",\n      style: {\n        fontSize: Number(this.state.fontSize)\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80\n      },\n      __self: this\n    }, this.state.bottomText), React.createElement(\"div\", {\n      className: \"tooltip\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84\n      },\n      __self: this\n    }, \"i\", React.createElement(\"span\", {\n      className: \"tooltipText\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85\n      },\n      __self: this\n    }, this.state.memeOrigName))));\n  }\n\n}\n\nexport default MainProgram;","map":{"version":3,"sources":["/Users/artemmurzo/Desktop/Old projects/reactapp/src/MainProgram.js"],"names":["React","Component","MainProgram","constructor","handleChange","event","target","name","value","setState","handleSubmit","preventDefault","randNum","Math","floor","random","state","allMemeImgs","length","randMemeImg","url","memeName","randomImg","memeOrigName","handleFont","topText","bottomText","fontSize","componentDidMount","fetch","then","response","json","memes","data","render","Number"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;;AAEA,MAAMC,WAAN,SAA0BD,SAA1B,CAAoC;AAChCE,EAAAA,WAAW,GAAG;AACV;;AADU,SAsBdC,YAtBc,GAsBCC,KAAK,IAAI;AAAA,4BACEA,KAAK,CAACC,MADR;AAAA,YACbC,IADa,iBACbA,IADa;AAAA,YACPC,KADO,iBACPA,KADO;AAEpB,WAAKC,QAAL,CAAc;AAAE,SAACF,IAAD,GAAQC;AAAV,OAAd;AACH,KAzBa;;AAAA,SA6BdE,YA7Bc,GA6BCL,KAAK,IAAI;AACpBA,MAAAA,KAAK,CAACM,cAAN;AACA,YAAMC,OAAO,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgB,KAAKC,KAAL,CAAWC,WAAX,CAAuBC,MAAlD,CAAhB;AACA,YAAMC,WAAW,GAAG,KAAKH,KAAL,CAAWC,WAAX,CAAuBL,OAAvB,EAAgCQ,GAApD;AACA,YAAMC,QAAQ,GAAG,KAAKL,KAAL,CAAWC,WAAX,CAAuBL,OAAvB,EAAgCL,IAAjD;AACA,WAAKE,QAAL,CAAc;AAAEa,QAAAA,SAAS,EAAEH,WAAb;AAA0BI,QAAAA,YAAY,EAAEF;AAAxC,OAAd;AACH,KAnCa;;AAAA,SAqCdG,UArCc,GAqCD,MAAM,CAElB,CAvCa;;AAEV,SAAKR,KAAL,GAAa;AACTS,MAAAA,OAAO,EAAE,EADA;AAETC,MAAAA,UAAU,EAAE,EAFH;AAGTC,MAAAA,QAAQ,EAAE,IAHD;AAITL,MAAAA,SAAS,EAAE,+BAJF;AAKTL,MAAAA,WAAW,EAAE,EALJ;AAMTM,MAAAA,YAAY,EAAC;AANJ,KAAb;AASH;;AAEDK,EAAAA,iBAAiB,GAAG;AAChBC,IAAAA,KAAK,CAAC,mCAAD,CAAL,CACKC,IADL,CACUC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EADtB,EAEKF,IAFL,CAEUC,QAAQ,IAAI;AAAA,YACPE,KADO,GACEF,QAAQ,CAACG,IADX,CACPD,KADO;AAEd,WAAKxB,QAAL,CAAc;AAAEQ,QAAAA,WAAW,EAAEgB;AAAf,OAAd;AACH,KALL;AAMH;;AAqBDE,EAAAA,MAAM,GAAG;AACL,WACI,0CACI;AAAM,MAAA,SAAS,EAAC,WAAhB;AAA4B,MAAA,QAAQ,EAAE,KAAKzB,YAA3C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AACI,MAAA,IAAI,EAAC,MADT;AAEI,MAAA,IAAI,EAAC,SAFT;AAGI,MAAA,WAAW,EAAC,UAHhB;AAII,MAAA,KAAK,EAAE,KAAKM,KAAL,CAAWS,OAJtB;AAKI,MAAA,QAAQ,EAAE,KAAKrB,YALnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,EAQI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cARJ,EASI;AACI,MAAA,IAAI,EAAC,MADT;AAEI,MAAA,IAAI,EAAC,YAFT;AAGI,MAAA,WAAW,EAAC,aAHhB;AAII,MAAA,KAAK,EAAE,KAAKY,KAAL,CAAWU,UAJtB;AAKI,MAAA,QAAQ,EAAE,KAAKtB,YALnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MATJ,EAgBI;AACI,MAAA,IAAI,EAAC,QADT;AAEI,MAAA,IAAI,EAAC,UAFT;AAGI,MAAA,WAAW,EAAC,kBAHhB;AAII,MAAA,KAAK,EAAE,KAAKY,KAAL,CAAWW,QAJtB;AAKI,MAAA,QAAQ,EAAE,KAAKvB,YALnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAhBJ,CADJ,EA2BI;AAAK,MAAA,SAAS,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAK,MAAA,GAAG,EAAE,KAAKY,KAAL,CAAWM,SAArB;AAAgC,MAAA,GAAG,EAAC,EAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,EAEI;AAAI,MAAA,SAAS,EAAC,KAAd;AACI,MAAA,KAAK,EAAE;AAACK,QAAAA,QAAQ,EAAES,MAAM,CAAC,KAAKpB,KAAL,CAAWW,QAAZ;AAAjB,OADX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAEK,KAAKX,KAAL,CAAWS,OAFhB,CAFJ,EAMI;AAAI,MAAA,SAAS,EAAC,QAAd;AACI,MAAA,KAAK,EAAE;AAACE,QAAAA,QAAQ,EAAES,MAAM,CAAC,KAAKpB,KAAL,CAAWW,QAAZ;AAAjB,OADX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAEK,KAAKX,KAAL,CAAWU,UAFhB,CANJ,EAUI;AAAK,MAAA,SAAS,EAAC,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YACI;AAAM,MAAA,SAAS,EAAC,aAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAA+B,KAAKV,KAAL,CAAWO,YAA1C,CADJ,CAVJ,CA3BJ,CADJ;AA4CH;;AAvF+B;;AA0FpC,eAAerB,WAAf","sourcesContent":["import React, {Component} from \"react\"\r\n\r\nclass MainProgram extends Component {\r\n    constructor() {\r\n        super()\r\n        this.state = {\r\n            topText: \"\",\r\n            bottomText: \"\",\r\n            fontSize: \"20\",\r\n            randomImg: \"http://i.imgflip.com/1bij.jpg\",\r\n            allMemeImgs: [],\r\n            memeOrigName:\"\"\r\n        }\r\n        \r\n    }\r\n    \r\n    componentDidMount() {\r\n        fetch(\"https://api.imgflip.com/get_memes\")\r\n            .then(response => response.json())\r\n            .then(response => {\r\n                const {memes} = response.data\r\n                this.setState({ allMemeImgs: memes})\r\n            })\r\n    }\r\n    \r\n    handleChange = event => {\r\n        const {name, value} = event.target\r\n        this.setState({ [name]: value })\r\n    }\r\n    \r\n\r\n    \r\n    handleSubmit = event => {\r\n        event.preventDefault()\r\n        const randNum = Math.floor(Math.random() * this.state.allMemeImgs.length)\r\n        const randMemeImg = this.state.allMemeImgs[randNum].url\r\n        const memeName = this.state.allMemeImgs[randNum].name \r\n        this.setState({ randomImg: randMemeImg, memeOrigName: memeName })\r\n    }\r\n\r\n    handleFont = () => {\r\n\r\n    }\r\n    \r\n    render() {\r\n        return (\r\n            <>\r\n                <form className=\"meme-form\" onSubmit={this.handleSubmit}>\r\n                    <input \r\n                        type=\"text\"\r\n                        name=\"topText\"\r\n                        placeholder=\"Top Text\"\r\n                        value={this.state.topText}\r\n                        onChange={this.handleChange}\r\n                    /> \r\n                    <button>Make</button>\r\n                    <input \r\n                        type=\"text\"\r\n                        name=\"bottomText\"\r\n                        placeholder=\"Bottom Text\"\r\n                        value={this.state.bottomText}\r\n                        onChange={this.handleChange}\r\n                    /> \r\n                    <input \r\n                        type=\"number\"\r\n                        name=\"fontSize\"\r\n                        placeholder=\"Choose font size\"\r\n                        value={this.state.fontSize}\r\n                        onChange={this.handleChange}\r\n                    /> \r\n                \r\n                    \r\n                </form>\r\n                <div className=\"meme\">\r\n                    <img src={this.state.randomImg} alt=\"\" />\r\n                    <h2 className=\"top\" \r\n                        style={{fontSize: Number(this.state.fontSize)}}>\r\n                        {this.state.topText}\r\n                    </h2>\r\n                    <h2 className=\"bottom\" \r\n                        style={{fontSize: Number(this.state.fontSize)}}>\r\n                        {this.state.bottomText}\r\n                    </h2>\r\n                    <div className=\"tooltip\">i   \r\n                        <span className=\"tooltipText\">{this.state.memeOrigName}</span>\r\n                    </div>\r\n                </div>\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nexport default MainProgram"]},"metadata":{},"sourceType":"module"}